#BlueJ class context
comment0.target=FileParserCSV
comment0.text=\n\ Parse\ a\ CSV\ file.\n\ Splits\ lines\ on\ the\ COMMA\ delimiter\ between\ data\ cells.\n\ Retains\ any\ COMMA\ between\ a\ pair\ of\ QUOTE\ marks.\n\ Removes\ the\ initial\ and\ final\ QUOTE\ mark\ if\ present\ within\ a\ data\ cell.\ \n\ Retains\ embedded\ QUOTE\ marks\ i.e.\ QUOTE\ text\ QUOTE\ QUOTE\ text\ QUOTE.\n\ Correctly\ handles\:\ "DeCart\ said\ ""I\ think,\ therefore\ I\ am""\ in\ his\ book."\n\ Preserves\ empty\ strings\ (e.g.\ ",,,"\ is\ converted\ to\ four\ data\ cells).\n\ Assumes\ the\ first\ row\ contains\ headers.\ Provides\ headers\ separate\ from\ data.\n\ Converts\ cells\ to\ Integer\ or\ Double\ if\ possible.\n\ Provides\ all\ other\ cell\ types\ as\ String.\n\ No\ support\ for\ Microsoft\ extensions\ for\ CSV\ eported\ from\ Excel.\n
comment1.params=
comment1.target=java.lang.Object[][]\ getAllData()
comment1.text=\n\ Get\ the\ data\ matrix.\n\ Each\ cell\ name\ may\ be\ type\ String,\ Integer,\ or\ Double.\n\ @return\ A\ table\ consisting\ of\ rows\ of\ cells.\ May\ be\ empty.\n
comment2.params=
comment2.target=java.lang.Object[]\ getColumnNames()
comment2.text=\n\ Get\ the\ column\ names.\n\ Each\ column\ name\ may\ be\ type\ String,\ Integer,\ or\ Double.\n\ @return\ An\ array\ of\ objects.\n
comment3.params=filename
comment3.target=FileParserCSV(java.lang.String)
comment3.text=\n\ Construct\ the\ parser.\ \n\ This\ parses\ the\ given\ file\ immediately.\ \n\ This\ loads\ all\ the\ data\ to\ RAM\ (not\ appropriate\ for\ very\ large\ files).\n\ This\ can\ handle\ any\ number\ of\ rows\ and\ columns.\n\ The\ parser\ may\ print\ warnings\ on\ the\ console.\n\ @param\ filename\ The\ file\ to\ be\ parsed.\ Assumed\ of\ type\ CSV.\n
comment4.params=line\ start\ end
comment4.target=java.lang.Object\ extractField(java.lang.String,\ int,\ int)
comment4.text=\n\ Extract\ one\ field\ from\ one\ line\ of\ a\ CSV\ file.\n\ @param\ line\ One\ entire\ line\ of\ the\ file.\n\ @param\ start\ The\ first\ character\ to\ extract.\ Starts\ with\ zero.\n\ @param\ end\ The\ first\ character\ to\ ignore\ i.e.\ last\ +\ 1.\n\ @return\ A\ String\ or\ Integer\ or\ Double.\n
comment5.params=word
comment5.target=java.lang.Object\ convertField(java.lang.String)
comment5.text=\n\ Convert\ a\ String\ to\ Integer\ or\ Double\ if\ possible.\n\ @param\ word\ A\ String\ to\ be\ tested.\n\ @return\ An\ Object\ whose\ type\ is\ String,\ Integer,\ or\ Double.\n
comment6.params=line
comment6.target=java.lang.Object[]\ parseLineCSV(java.lang.String)
comment6.text=\n\ Parse\ one\ line\ of\ a\ CSV\ file.\n\ Returned\ array\ holds\ objects\ of\ type\ String,\ Integer,\ and\ Double.\n\ @param\ line\ One\ line\ of\ a\ CSV\ file.\n\ @return\ An\ array\ of\ objects\ representing\ fields\ in\ the\ line.\n
numComments=7
